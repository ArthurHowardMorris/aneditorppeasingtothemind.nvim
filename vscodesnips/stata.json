{

	"delimit semicolon": {
		"prefix": "#d",
		"body": [
			"#delimit ;",
			"${2:semicolonDelimitedCommand}",
			"$0",
			";",
			"#delimit cr"
		],
		"description": "colon delimited section"
	},

	"reghdfe": {
		"prefix": "reghdfe",
		"body": [
			"#delimit ;",
			"`reghdfe'",
    			"\t${1:`y'}",
    			"\t${2:`x'}",
    			"\t${3:`X'}",
    			"\t,",
    			"\tabsorb( ${4:`FE'} )",
    			"\tcluster( ${5:`CL'} )",
    			"\t${6:nocons}",
				"\t;",
			"#delimit cr"
		],
		"description": "a standard reghdfe setup using locals for all params"
	},

	"drop and check dups by varlist": {
		"prefix": "dup",
		"body": [
			"/* drop dups and check for unique id */",
			"unab id: ${1:unique_varlist can use wildcards}",
			"duplicates drop ",
			"isid `id'",
			"$0"
		],
		"description": "drop duplicates and check that varlist is unique"
	},

	"header": {
		"prefix": "headerStata",
		"body": [
			"************************************",
			"* Name: ${1: Arthur Morris}",
			"* Date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
			"* Step: ${2: extract process analyze}",
			"* Description: ${3: description}",
			"* Project Root:",
			"${4: global root 'path/to/root}",
			"* Input:",
			"\tlocal inhere ${5: path/to/inhere}",
			"* Output:",
			"\tlocal outhere ${6: path/to/outhere}",
			"************************************"
		],
		"description": "a header for a stata file"
	},

	"frlink sequence": {
		"prefix": "link",
		"body": [
		"frlink ${1:1 or m}:1 ${2:linkvars}, frame(${3:framename})",
		"frget ${4:get varlist} , from(${3:framename}) ",
		"drop ${3:framename} "
		],
		"description": "link two frames on linkvars get varlist and clean up the link"
	},

	"frame put command": {
		"prefix": "put",
		"body": [
			"frame put ${1:varlist} ${2:if condition}, into(${3:newFrame})", 
			"$0"
		],
		"description": "frame put command"
	},

	"label vars command": {
		"prefix": "lab var",
		"body": [
			"label variable ${1:varname} \"${2:label}\"", 
			"$0"
		],
		"description": "label vars command"
	},

	"safe implementation of greater than condition": {
		"prefix": "geq",
		"body": [
			"(${1:varname} > ${2:numeric} & !mi(${1:varname}))",
			"$0"
		],
		"description": "makes sure that '.' is treated as missing not pos inf in stata"
	},

	"stat sig stars": {
		"prefix": "star",
		"body": "star(* .1 ** .05 *** .01)$0",
		"description": "stars for esttab"
	},

	"subinstr expression": {
		"prefix": "subinstr",
		"body": "subinstr(\"${1:look in this}\", \"${2:for this}\", \"${3:sub this}\",${4:.})",
		"description": "string substitution syntax"
	},

	"call local macro": {
		"prefix":	"`",
		"body":		"`${1:local_name}'$0",
		"description":	"when calling local macros pair quotes correctly"
	},

	"manky double quoted list stata string": {
		"prefix":	"`\"",
		"body":		"`\" \"${1:item1}\" \"${2:item2}\" \"'",
		"description":  "this really is how you put a quoted list into a stata local and how you put double quotes into a string"
	},

	"safe sort": {
		"prefix":	"sort",
		"body":		"sort ${1:varlist}, stable",
		"description":	"protects from unstable sorting"
	},

	"safe bysort": {
		"prefix":	"bysort",
		"body": [
			"sort ${1:varlist}, stable",
			"by ${1:varlist}: ${2: byable command here}",
			"$0"
		],
		"description":	"bysort is never stable and thus never safe"
	},

	"loop over values": {
		"prefix":	"forvalues",
		"body": [
			"forvalues i = ${1:1}(${2:1})${3:10} {",
			"${4:commands referencing `i'}",
			"}",
			"$0"
		],
		"description": "forvalues loop, defaults to looping 1-10 by 1"
	}

}
